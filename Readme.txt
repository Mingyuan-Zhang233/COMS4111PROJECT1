1. The Database is on the server under account mz2715.

2. Once server.py is executed, our web page is accessible at 34.138.91.154 through port 80 (default HTTP port). 

3. We implemented the function of adding students, courses, sections of courses, and registration record (is_taking table) into the database. In addition, we implemented pages that let the user to see a student's info, search for sections by a variety of criteria, and viewing a student's current and past courses. Moreover, we provided an "admin backdoor" to operate directly on the database. This ideally should be password-protected but not yet implemented. Changing "school" or "department" is not implemented as I don't think founding or removing schools or departments is very unlikely to happen. 

4. The process of adding courses is particularly interesting, because thought the table "course" contains many field. Not all of them needed to be input by the user (admitted our table is a bit redundant). For example, since Columbia has a specific way of determining the first 4 letters of the course ID. We can decoded the offer_class relationship from the cid without having the user specifically adding them separately. Since one course may be offered by multiple departments, the insertion is executed multiple times, one for each department. The SQL statement is set to do nothing if one identical entry is already there (since it is very very unlikely to be the first class every for a department, but the insertion on department cannot be omitted due to cyclic reference used to ensure total participation). Multiple insertions is put into one transaction to avoid the "chicken or egg" problem. 

Another particularly interesting page is the page displaying student information. Since one student might be pursuing multiple programs. What we did is that we find out all the entries related to this student and then displaying all the distinct ones (in a human eye-friendly format). 
